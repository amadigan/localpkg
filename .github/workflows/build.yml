name: Build Git for macOS

on:
  workflow_dispatch:
permissions:
  contents: write
jobs:
  build-git:
    runs-on: macos-latest
    environment: prod

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3
    - name: Cache Git Source
      uses: actions/cache@v3
      with:
        path: src/git/.git
        key: git-src
        restore-keys: |
          git-src
    - name: Install Dependencies
      run: |
        brew update
        brew install autoconf
    - name: Decode and import Code Signing Certificate
      env:
        CODESIGN_P12: ${{ secrets.CODESIGN_P12 }}
        INSTALLER_P12: ${{ secrets.INSTALLER_P12 }}
        P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
      run: |
        echo "${CODESIGN_P12}" | base64 --decode > code_signing_cert.p12
        security import code_signing_cert.p12 -k ~/Library/Keychains/login.keychain-db -P "${P12_PASSWORD}" -T /usr/bin/codesign
        rm code_signing_cert.p12
        echo "${INSTALLER_P12}" | base64 --decode > installer_signing_cert.p12
        security import installer_signing_cert.p12 -k ~/Library/Keychains/login.keychain-db -P "${P12_PASSWORD}" -T /usr/bin/productsign
        rm installer_signing_cert.p12
        TEMP_KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
        security unlock-keychain -p "${TEMP_KEYCHAIN_PASSWORD}" ~/Library/Keychains/login.keychain-db
        security set-key-partition-list -S apple-tool:,apple: -s -k "${TEMP_KEYCHAIN_PASSWORD}" ~/Library/Keychains/login.keychain-db
        security find-identity -v 
        CODE_SIGNING_IDENTITY=$(security find-identity -v -p codesigning | awk 'NR == 1{print $2}')
        PKG_SIGNING_IDENTITY=$(security find-identity -v | grep Installer | awk 'NR == 1{print $2}')
        echo "CODE_SIGNING_IDENTITY=$CODE_SIGNING_IDENTITY"
        echo "PKG_SIGNING_IDENTITY=$PKG_SIGNING_IDENTITY"
        echo "CODE_SIGNING_IDENTITY=$CODE_SIGNING_IDENTITY" >> $GITHUB_ENV
        echo "PKG_SIGNING_IDENTITY=$PKG_SIGNING_IDENTITY" >> $GITHUB_ENV
    - name: Build and sign package
      env:
        CODE_SIGNING_IDENTITY: ${{ env.CODE_SIGNING_IDENTITY }}
        PKG_SIGNING_IDENTITY: ${{ env.PKG_SIGNING_IDENTITY }}
      run: |
        ./build-git.sh
    - name: Build Git
      run: ./build-git.sh
    - name: Build installers
      run: ./build-pkgs.sh
    - name: Attach Build Files to Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        RELEASE_ID=$(gh api repos/${{ github.repository }}/releases | jq -r '.[] | select(.draft == true) | .tag_name')

        if [ -z "$RELEASE_ID" ]; then
          echo "No draft release found. Exiting."
          exit 1
        fi

        echo "Uploading build artifacts to release $RELEASE_ID"

        gh release upload "$RELEASE_ID" dist/git.pkg --clobber
        gh release upload "$RELEASE_ID" dist/git.tar.gz --clobber
        gh release upload "$RELEASE_ID" dist/git --clobber
        gh release upload "$RELEASE_ID" dist/gh --clobber
    - name: Save Git Source Cache
      uses: actions/cache@v3
      if: always() # Ensure cache is saved even if the build fails
      with:
        path: src/git/.git
        key: git-src
